from sympy import Matrix, symbols, solve, pprint
import numpy as np

# A,B,C,D,E,F,G = symbols('A B C D E F G')
# X = Matrix([1,-1,A,B,C,D,E,F,G])
# B = Matrix([A,B,C,D,E,F,G])
# M = Matrix([[0.8,0.1,0,0,0.1,0,0,0,0],
#     [0.1,0,0,0,0.8,0,0.1,0,0],
#     [0,0,0,.2/3,.2/3,0,.2/3,0.8,0],
#     [0,0.1,0,0,0.8,0,0,0,0.1],
#     [0,0,0,0.2,0,0,0,0.8,0],
#     [0,0,0,0,0.1,0,0.1,0,0.8],
#     [0,0,0,0,0,0.8,0,0.2,0]])
# res = solve(M*X-B, [A,B,C,D,E,F,G])
# print(res)
# pprint(M)

a = np.array([[-1, 0, 0.1, 0, 0, 0, 0],
    [0, -1, 0.8, 0, 0.1, 0, 0],
    [.2/3, .2/3, -1, .2/3, 0, 0.8, 0],
    [0, 0, 0.8, -1, 0, 0, 0.1],
    [0, 0.2, 0, 0, -1, 0.8, 0],
    [0, 0, 0.1, 0, 0.1, -1, 0.8],
    [0, 0, 0, 0.8, 0, 0.2, -1]]) 
b = np.array([-0.7,-0.1,0,0.1,0,0,0])
sol = np.linalg.solve(a, b)
print(sol)

# x1, x2, f1 = symbols('x1 x2 f1')
# X = Matrix([0, x1, x2])
# B = Matrix([f1, 50, 60])
# M = Matrix([[1, 2, 3], [4, 5, 6], [7, 8, 9]])
# res = solve(M * X - B, [x1, x2, f1])
# print(res)
# A = 0.8*1 + 0.1*C + 0.1*-1, -> -0.7
# B = 0.8*C + 0.1*1 + 0.1*E, -> -0.1
# C = 0.8*F + 0.667*A + 0.667*B + 0.677*D,
# D = 0.8*C + 0.1*G + 0.1*-1, -> 0.1
# E = 0.8*F + 0.2*B,
# F = 0.8*G + 0.1*C + 0.1*E,
# G = 0.8*D + 0.2*F
